---

- name: Check if sd file exists in {{ _current_env_dir }}/Inventory/solution-descriptor
  stat:
    path: "{{ _current_env_dir }}/Inventory/solution-descriptor/sd.{{ item }}"
  loop:
    - yaml
    - yml
  register: sd_files_check
  ignore_errors: yes

- name: "Create and fill solution_structure variable"
  when:
    - sd_files_check is defined
    - (sd_files_check.results | selectattr('stat.exists') | list | length) > 0
  block:
    - name: Create a path for existing SD file
      set_fact:
        sd_file_path: "{{ sd_files_check.results | selectattr('stat.exists') | map(attribute='stat.path') | first }}"

    - name: Load applications data from sd.yaml/yml
      include_vars:
        file: "{{ sd_file_path }}"
        name: sd_config

    - name: Check that 'applications'-key exists
      assert:
        that:
          - "'applications' in sd_config"
          - "sd_config.applications is sequence"
        success_msg: "Root 'applications' key exists and is a list"
        fail_msg: "Missing or invalid 'applications' key in root"

    - name: Validate each application entry
      assert:
        that:
          - "'version' in item"
          - "'deployPostfix' in item"
          - "item.version is string"
          - "item.deployPostfix is string"
        success_msg: "Valid application entry: {{ item }}"
        fail_msg: "Invalid application entry: {{ item | to_nice_json }}"
        quiet: true
      loop: "{{ sd_config.applications }}"
      loop_control:
        label: "Application {{ item.version | default('unknown') }}"
      
    - name: All checks passed
      debug:
        msg: "All required fields are present and valid!"
      
    - name: Checking the existence of template descriptor
      stat:
        path: "{{ templates_dir }}/env_templates/{{ _template_name }}.{{ item }}"
      loop:
        - yml
        - yaml
      register: template_descriptor_stat

    - name: Set template descriptor file from found stat
      set_fact:
        template_descriptor_file: "{{ item.stat.path }}"
      loop: "{{ template_descriptor_stat.results }}"
      when: item.stat.exists
      register: template_descriptor_file_set

    - name: Fail if no template descriptor was found
      fail:
        msg: "Template descriptor was not found in {{ templates_dir }}/env_templates"
      when: template_descriptor_file_set.results | selectattr('skipped', 'defined') | length == (template_descriptor_stat.results | length)

    - name: Read template descriptor file
      slurp:
        src: "{{ template_descriptor_file }}"
      register: env_template_raw

    - name: Parse YAML content in template descriptor
      set_fact:
        env_template_data: "{{ env_template_raw['content'] | b64decode | from_yaml }}"

    - name: Extract namespace template paths from template descriptor
      set_fact:
        namespace_template_paths: "{{ env_template_data.namespaces | map(attribute='template_path') | list }}"
      when: env_template_data.namespaces is defined

    - name: "Namespace templates: Create temporary template file to render path"
      tempfile:
        state: file
        suffix: .j2
      register: temp_template

    - name: "Namespace templates: Write path to temp file"
      copy:
        content: "{{ namespace_template_paths }}"
        dest: "{{ temp_template.path }}"  

    - name: "Namespace templates: Render file and parse JSON"
      set_fact:
        namespace_template_paths: "{{ lookup('template', temp_template.path) }}"

    - name: "Namespace templates: Render file and parse JSONDelete temporary template file"
      file:
        path: "{{ temp_template.path }}"
        state: absent    

    - name: "Namespace templates: list of found namespace templates"
      debug:
        var: namespace_template_paths

    - name: "Namespace templates: Build template path map by deployPostfix"
      set_fact:
        postfix_template_map: "{{ dict(postfix_keys | zip(namespace_template_paths)) }}"
      vars:
        postfix_keys: >-
          {{
            namespace_template_paths
            | map('basename')
            | map('split', '.')
            | map('first')
            | list
          }}

    - name: Initialize solution_structure
      no_log: True
      set_fact:
        solution_structure: {}
      
    - name: Build solution_structure variable
      no_log: True
      set_fact:
        solution_structure: "{{ solution_structure | combine(_entry | from_json, recursive=True) }}"
      loop: "{{ sd_config.applications }}"
      loop_control:
        label: "{{ item.deployPostfix }}"
      vars:
        _entry: >-
          {% set version_full = item.version -%}
          {% set version = version_full.split(':')[1] -%}
          {% set solution = version_full.split(':')[0] -%}
          {% set postfix = item.deployPostfix -%}
          {% set path = postfix_template_map.get(postfix, None) -%}

          {% if path %}
            {% set content = lookup('file', path).split('\n') -%}
            {% set ns_line = content | select('match', '^\\s*name:') | list | first -%}
            {% if ns_line %}
              {% set ns_val = ns_line.split(':', 1)[1] | trim | replace('"', '') -%}
            {% else %}
              {% set ns_val = None -%}
            {% endif -%}
          {% else %}
            {% set ns_val = None -%}
          {% endif -%}

          {% set small_dict = {
            solution: {
              postfix: {
                "version": version,
                "namespace": ns_val
              }
            }
          } %}

          {{ small_dict | to_json }}
      
    - name: Update formatting in solution_structure variable
      no_log: True
      set_fact:
        solution_structure: "{{ solution_structure | regex_replace('({{)\\s*([^}\\s]+)\\s*(}})', '\\1 \\2 \\3') }}"
      
    - name: "Solution_structure: Create temporary template file to render the variable"
      tempfile:
        state: file
        suffix: .j2
      register: temp_template
      
    - name: "Solution_structure: Write solution_structure to temp template file"
      copy:
        content: "{{ solution_structure }}"
        dest: "{{ temp_template.path }}"
      
    - name: "Solution_structure: Render template and parse JSON"
      no_log: True
      set_fact:
        solution_structure: "{{ lookup('template', temp_template.path) }}"
      
    - name: "Solution_structure: Delete temporary template file"
      file:
        path: "{{ temp_template.path }}"
        state: absent

    - name: Show rendered solution_structure
      debug:
        var: solution_structure
      
    - name: Merge solution_structure into current_env
      no_log: True
      set_fact:
        current_env: "{{ current_env | combine({'solution_structure': solution_structure}, recursive=True) }}"
      