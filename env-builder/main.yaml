---
- name: Generate jobs set
  hosts: 127.0.0.1
  connection: local
  gather_facts: false
  tasks:
    - name: Generate environment specific schema
      ansible.builtin.copy:
        src: "{{ current_env_template.envSpecificSchema }}"
        dest: "{{ current_env_dir }}/env-specific-schema.yml"
      when: current_env_template.envSpecificSchema is defined

    - name: Find parametersets with Jinja templates
      ansible.builtin.find:
        paths: "{{ render_parameters_dir }}"
        patterns: '*.yml.j2,*.yaml.j2'
        recurse: true
      register: paramset_templates

    - name: Generate paramsets defined using Jinja templates
      ansible.builtin.include_role:
        name: generate_paramsets
      vars:
        _paramset_path: "{{ paramset_file.path }}"
      loop: "{{ paramset_templates.files }}"
      loop_control:
        loop_var: paramset_file
      when: paramset_templates.files | length > 0

# Validate Required Variables

    - name: Validate required variables
      ansible.builtin.assert:
        that:
          - templates_dir is defined
          - env_instances_dir is defined
          - cluster_name is defined
          - current_env_dir is defined
        fail_msg: "Missing one or more required variables: templates_dir, env_instances_dir, cluster_name, current_env_dir. Please check your configuration."

# Check for APP_REG_DEFS_JOB Parameter

    - name: Check if APP_REG_DEFS_JOB is defined
      ansible.builtin.set_fact:
        use_external_defs: "{{ app_reg_defs_job is defined and app_reg_defs_job | length > 0 }}"

    - name: Log external definitions usage
      ansible.builtin.debug:
        msg: "APP_REG_DEFS_JOB variable is set, Application and Registry definitions from corresponding job will be used for the Environment"
      when: use_external_defs

    - name: Process external definitions
      block:
        - name: Get and unpack external definitions
          ansible.builtin.unarchive:
            src: "{{ jenkins_artifacts_dir }}/{{ app_reg_defs_job }}/definitions.zip"
            dest: "/tmp/external_defs"
            remote_src: true

        - name: Copy external AppDefs to environment
          ansible.builtin.copy:
            src: "/tmp/external_defs/{{ app_defs_path }}/"
            dest: "{{ current_env_dir }}/AppDefs/"
            remote_src: true
          when: app_defs_path is defined

        - name: Copy external RegDefs to environment
          ansible.builtin.copy:
            src: "/tmp/external_defs/{{ reg_defs_path }}/"
            dest: "{{ current_env_dir }}/RegDefs/"
            remote_src: true
          when: reg_defs_path is defined
      when: use_external_defs

# Discover and Render AppDef / RegDef Templates

    - name: Find AppDef templates
      ansible.builtin.find:
        paths: "{{ templates_dir }}/appdefs"
        patterns:
          - "*.yaml.j2"
          - "*.yml.j2"
          - "*.j2"
          - "*.yaml"
          - "*.yml"
        recurse: true
        use_regex: false
        file_type: file
      register: appdef_templates
      ignore_errors: true
      when: not use_external_defs

    - name: Find RegDef templates
      ansible.builtin.find:
        paths: "{{ templates_dir }}/regdefs"
        patterns:
          - "*.yaml.j2"
          - "*.yml.j2"
          - "*.j2"
          - "*.yaml"
          - "*.yml"
        recurse: true
        use_regex: false
        file_type: file
      register: regdef_templates
      ignore_errors: true
      when: not use_external_defs

    - name: Debug - Found AppDef and RegDef templates
      ansible.builtin.debug:
        msg:
          - "AppDefs Found: {{ appdef_templates.files | default([]) | length }}"
          - "RegDefs Found: {{ regdef_templates.files | default([]) | length }}"
      when: not use_external_defs

# Conditionally Render Templates if Present

    - name: Render AppDef / RegDef templates
      ansible.builtin.include_role:
        name: generate_appregdefs
      vars:
        appdef_templates_files: "{{ appdef_templates.files | default([]) }}"
        regdef_templates_files: "{{ regdef_templates.files | default([]) }}"
      when: >
        not use_external_defs and
        ((appdef_templates.files is defined and appdef_templates.files | length > 0) or
        (regdef_templates.files is defined and regdef_templates.files | length > 0))

