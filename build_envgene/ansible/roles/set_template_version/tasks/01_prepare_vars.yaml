---
- name: Get env_definition file path
  block:
    - name: Split "{{ env_name }}" by folder name
      ansible.builtin.set_fact:
        env_paths: "{{ env_name.split('/') }}"
    
    - name: Set env_directory for complex env_name {{ env_name }}
      ansible.builtin.set_fact:
        environments_dir: "{{ envs_directory_path + '/' + env_paths.0 }}"
        final_env_name: "{{ env_paths.1 }}"
      when: env_paths|length > 1

    - name: Set env_directory for simple env_name {{ env_name }}
      ansible.builtin.set_fact:
        environments_dir: "{{ envs_directory_path }}"
        final_env_name: "{{ env_paths.0 }}"
      when: env_paths|length == 1

    - name: Try to find "{{ final_env_name }}" in the "{{ environments_dir }}" directory
      find:
        paths: "{{ environments_dir }}"
        file_type: directory
        recurse: yes
        use_regex: yes
        patterns:
          - "^{{final_env_name}}$"
      register: reg_env_definition_dir

    - name: Find env_definition path
      find:
        paths: 
          - "{{ reg_env_definition_dir.files[0].path }}/Inventory"
          - "{{ reg_env_definition_dir.files[0].path }}/inventory"
        file_type: file
        recurse: yes
        use_regex: yes
        patterns:
          - ".*definition.*"
      register: reg_env_definition

    - name: Set env_definition path
      set_fact:
        env_definition_path: "{{ reg_env_definition.files[0].path }}"

- set_fact:
    log_var_args: "-a_arg {{ artifact_dest }} -b_arg {{ build_env_path }} -c_arg {{ envgen_debug }} -d_arg {{ env_name }} -e_arg {{ base_dir }} -f_arg {{ env_template_vers }} -g_arg {{ envs_directory_path }} -h_arg {{ registry_config_path }} -i_arg {{ cred_config_path }}"
- name: Log input variables
  shell: "cd {{ build_env_path }}; python3 {{ build_env_path }}/scripts/build_env/log_vars.py {{ log_var_args }}"
