name: "Dev: Sync .github folder across branches"

run-name: "Dev: Sync .github folder across branches"

on:
  workflow_dispatch:
    inputs:
      target_branches:
        description: 'Target branches to sync (comma-separated, leave empty for all branches)'
        required: false
        default: ''
      exclude_branch:
        description: 'Branches to exclude from sync (comma-separated)'
        required: false
        default: ''
      check_only:
        description: 'Check mode - show differences without syncing'
        required: false
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'false'

jobs:
  sync-github-folder:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get all branches
        id: get-branches
        run: |
          # Get all remote branches excluding main
          BRANCHES=$(git branch -r | grep -v "origin/main" | grep -v "HEAD" | sed 's/origin\///' | tr '\n' ',' | sed 's/,$//')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "Available branches: $BRANCHES"

      - name: Parse target branches
        id: parse-targets
        run: |
          if [ -n "${{ github.event.inputs.target_branches }}" ]; then
            TARGET_BRANCHES="${{ github.event.inputs.target_branches }}"
          else
            TARGET_BRANCHES="${{ steps.get-branches.outputs.branches }}"
          fi
          
          # Process exclude branches
          EXCLUDE_BRANCHES="${{ github.event.inputs.exclude_branch }}"
          echo "exclude_branches=$EXCLUDE_BRANCHES" >> $GITHUB_OUTPUT
          echo "Exclude branches: $EXCLUDE_BRANCHES"
          
          echo "target_branches=$TARGET_BRANCHES" >> $GITHUB_OUTPUT
          echo "Target branches: $TARGET_BRANCHES"

      - name: Sync .github folder to each branch
        run: |
          TARGET_BRANCHES="${{ steps.parse-targets.outputs.target_branches }}"
          EXCLUDE_BRANCHES="${{ steps.parse-targets.outputs.exclude_branches }}"
          CHECK_ONLY="${{ github.event.inputs.check_only }}"
          
          # Convert comma-separated string to array
          IFS=',' read -ra BRANCH_ARRAY <<< "$TARGET_BRANCHES"
          IFS=',' read -ra EXCLUDE_ARRAY <<< "$EXCLUDE_BRANCHES"
          
          # Create a filtered array excluding specified branches
          FILTERED_BRANCHES=()
          for branch in "${BRANCH_ARRAY[@]}"; do
            branch=$(echo "$branch" | xargs)  # Trim whitespace
            if [ -n "$branch" ]; then
              # Check if branch should be excluded
              EXCLUDED=false
              for exclude_branch in "${EXCLUDE_ARRAY[@]}"; do
                exclude_branch=$(echo "$exclude_branch" | xargs)  # Trim whitespace
                if [ "$branch" = "$exclude_branch" ]; then
                  EXCLUDED=true
                  break
                fi
              done
              
              if [ "$EXCLUDED" = false ]; then
                FILTERED_BRANCHES+=("$branch")
              else
                echo "üö´ Excluding branch: $branch"
              fi
            fi
          done
          
          echo "=========================================="
          echo "Starting process for ${#FILTERED_BRANCHES[@]} branch(es)"
          echo "Check only mode: $CHECK_ONLY"
          echo "Excluded branches: $EXCLUDE_BRANCHES"
          echo "=========================================="
          
          for branch in "${FILTERED_BRANCHES[@]}"; do
            echo ""
            echo "=========================================="
            echo "üîÑ Processing branch: $branch"
            echo "=========================================="
              
              # Check if branch exists
              if git ls-remote --heads origin "$branch" | grep -q "$branch"; then
                echo "‚úÖ Branch $branch exists"
                
                # Get the latest commit hash for main branch
                MAIN_COMMIT=$(git rev-parse origin/main)
                echo "üìã Main branch commit: ${MAIN_COMMIT:0:8}"
                
                # Get the latest commit hash for target branch
                TARGET_COMMIT=$(git rev-parse "origin/$branch")
                echo "üìã Target branch commit: ${TARGET_COMMIT:0:8}"
                
                # Check if .github folder exists in target branch
                if git ls-tree -r --name-only "origin/$branch" | grep -q "^\.github/"; then
                  echo "üìÅ .github folder exists in $branch"
                  
                  # Get the latest modification time of .github files in main
                  MAIN_GITHUB_TIME=$(git log --format="%ct" --max-count=1 -- .github/ | head -1)
                  
                  # Get the latest modification time of .github files in target branch
                  TARGET_GITHUB_TIME=$(git log --format="%ct" --max-count=1 "origin/$branch" -- .github/ | head -1)
                  
                  # Convert timestamps to readable format
                  MAIN_GITHUB_DATE=$(date -d "@$MAIN_GITHUB_TIME" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
                  TARGET_GITHUB_DATE=$(date -d "@$TARGET_GITHUB_TIME" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
                  
                  echo "üïê Main .github last modified: $MAIN_GITHUB_DATE (timestamp: $MAIN_GITHUB_TIME)"
                  echo "üïê Target .github last modified: $TARGET_GITHUB_DATE (timestamp: $TARGET_GITHUB_TIME)"
                  
                  # Check if we should sync or just show differences
                  if [ "$CHECK_ONLY" = "true" ]; then
                    echo "üîç Check mode - analyzing differences for $branch..."
                    
                    # Get list of .github files in main (excluding sync-github-folder.yml)
                    echo "üìã Analyzing .github files in main branch..."
                    MAIN_GITHUB_FILES=$(git ls-tree -r --name-only origin/main | grep "^\.github/" | grep -v "sync-github-folder.yml" | sort)
                    
                    # Get list of .github files in target branch
                    echo "üìã Analyzing .github files in $branch branch..."
                    TARGET_GITHUB_FILES=$(git ls-tree -r --name-only "origin/$branch" | grep "^\.github/" | sort)
                    
                    # Find files that exist in main but not in target
                    MISSING_FILES=$(comm -23 <(echo "$MAIN_GITHUB_FILES") <(echo "$TARGET_GITHUB_FILES"))
                    
                    # Find files that exist in target but not in main
                    EXTRA_FILES=$(comm -13 <(echo "$MAIN_GITHUB_FILES") <(echo "$TARGET_GITHUB_FILES"))
                    
                    # Check for content differences in common files
                    DIFFERENT_FILES=""
                    for file in $(comm -12 <(echo "$MAIN_GITHUB_FILES") <(echo "$TARGET_GITHUB_FILES")); do
                      if ! git diff --quiet "origin/main:$file" "origin/$branch:$file" 2>/dev/null; then
                        DIFFERENT_FILES="$DIFFERENT_FILES $file"
                      fi
                    done
                    
                    # Report findings
                    if [ -z "$MISSING_FILES" ] && [ -z "$EXTRA_FILES" ] && [ -z "$DIFFERENT_FILES" ]; then
                      echo "‚úÖ Branch $branch is up to date with main"
                    else
                      if [ -n "$MISSING_FILES" ]; then
                        echo "üìÑ Files missing in $branch (would be added):"
                        echo "$MISSING_FILES" | sed 's/^/   - /'
                      fi
                      
                      if [ -n "$EXTRA_FILES" ]; then
                        echo "üìÑ Files in $branch not in main (would be removed):"
                        echo "$EXTRA_FILES" | sed 's/^/   - /'
                      fi
                      
                      if [ -n "$DIFFERENT_FILES" ]; then
                        echo "üìÑ Files with different content in $branch:"
                        echo "$DIFFERENT_FILES" | sed 's/^/   - /'
                      fi
                    fi
                    
                  else
                    # Normal sync mode
                    if [ -z "$TARGET_GITHUB_TIME" ] || [ "$MAIN_GITHUB_TIME" -gt "$TARGET_GITHUB_TIME" ]; then
                      echo "üîÑ Syncing .github folder to $branch..."
                      
                      # Create a new branch from target branch
                      echo "üìù Creating temporary branch sync-github-$branch"
                      git checkout -b "sync-github-$branch" "origin/$branch"
                      
                      # Copy .github folder from main (excluding sync-github-folder.yml)
                      echo "üìã Copying .github folder from main (excluding sync-github-folder.yml)"
                      git checkout origin/main -- .github/
                      
                      # Remove sync-github-folder.yml if it exists in target branch
                      if [ -f ".github/workflows/sync-github-folder.yml" ]; then
                        echo "üóëÔ∏è  Removing sync-github-folder.yml from target branch"
                        git rm -f .github/workflows/sync-github-folder.yml
                      fi
                      
                      # Remove workflow files that don't exist in main
                      echo "üßπ Cleaning up workflow files not present in main..."
                      for workflow_file in .github/workflows/*.yml .github/workflows/*.yaml; do
                        if [ -f "$workflow_file" ]; then
                          workflow_name=$(basename "$workflow_file")
                          if ! git ls-tree -r --name-only origin/main | grep -q "^\.github/workflows/$workflow_name$"; then
                            echo "üóëÔ∏è  Removing workflow not in main: $workflow_name"
                            git rm -f "$workflow_file"
                          fi
                        fi
                      done
                      
                      # Check if there are any changes
                      if git diff --staged --quiet; then
                        echo "‚ÑπÔ∏è  No changes to sync for $branch"
                        git checkout main
                        git branch -D "sync-github-$branch"
                        echo "üßπ Cleaned up temporary branch"
                      else
                        # Show what files will be changed
                        echo "üìÑ Files to be updated:"
                        git diff --staged --name-only | sed 's/^/   - /'
                        
                        # Commit and push changes
                        echo "üíæ Committing changes..."
                        git config user.name "github-actions[bot]"
                        git config user.email "github-actions[bot]@users.noreply.github.com"
                        git commit -m "ci: sync .github folder from main branch"
                        
                        # Push to target branch
                        echo "üöÄ Pushing changes to $branch..."
                        git push origin "sync-github-$branch:$branch"
                        
                        # Cleanup
                        git checkout main
                        git branch -D "sync-github-$branch"
                        
                        echo "‚úÖ Successfully synced .github folder to $branch"
                      fi
                    else
                      echo "‚è≠Ô∏è  Skipping $branch - target branch .github files are newer or same age"
                      echo "   Main: $MAIN_GITHUB_DATE"
                      echo "   Target: $TARGET_GITHUB_DATE"
                    fi
                  fi
                else
                  echo "üìÅ .github folder doesn't exist in $branch"
                  
                                     if [ "$CHECK_ONLY" = "true" ]; then
                     echo "üîç Check mode - .github folder doesn't exist in $branch"
                     echo "üìÑ Files that would be added from main:"
                     git ls-tree -r --name-only origin/main | grep "^\.github/" | grep -v "sync-github-folder.yml" | sed 's/^/   - /'
                  else
                    echo "üìÅ Creating .github folder in $branch..."
                    
                    # Create a new branch from target branch
                    echo "üìù Creating temporary branch sync-github-$branch"
                    git checkout -b "sync-github-$branch" "origin/$branch"
                    
                    # Copy .github folder from main (excluding sync-github-folder.yml)
                    echo "üìã Copying .github folder from main (excluding sync-github-folder.yml)"
                    git checkout origin/main -- .github/
                    
                    # Remove sync-github-folder.yml if it exists in target branch
                    if [ -f ".github/workflows/sync-github-folder.yml" ]; then
                      echo "üóëÔ∏è  Removing sync-github-folder.yml from target branch"
                      git rm -f .github/workflows/sync-github-folder.yml
                    fi
                    
                    # Remove workflow files that don't exist in main
                    echo "üßπ Cleaning up workflow files not present in main..."
                    for workflow_file in .github/workflows/*.yml .github/workflows/*.yaml; do
                      if [ -f "$workflow_file" ]; then
                        workflow_name=$(basename "$workflow_file")
                        if ! git ls-tree -r --name-only origin/main | grep -q "^\.github/workflows/$workflow_name$"; then
                          echo "üóëÔ∏è  Removing workflow not in main: $workflow_name"
                          git rm -f "$workflow_file"
                        fi
                      fi
                    done
                    
                    # Show what files will be added
                    echo "üìÑ Files to be added:"
                    git diff --staged --name-only | sed 's/^/   - /'
                    
                    # Commit and push changes
                    echo "üíæ Committing changes..."
                    git config user.name "github-actions[bot]"
                    git config user.email "github-actions[bot]@users.noreply.github.com"
                    git commit -m "ci: add .github folder from main branch"
                    
                    # Push to target branch
                    echo "üöÄ Pushing changes to $branch..."
                    git push origin "sync-github-$branch:$branch"
                    
                    # Cleanup
                    git checkout main
                    git branch -D "sync-github-$branch"
                    
                    echo "‚úÖ Successfully created .github folder in $branch"
                  fi
                fi
              else
                echo "‚ùå Branch $branch does not exist, skipping..."
              fi
              
              echo "=========================================="
              echo "Finished processing branch: $branch"
              echo "=========================================="
          done
          
          echo ""
          echo "=========================================="
          echo "üéâ Sync process completed!"
          echo "==========================================" 