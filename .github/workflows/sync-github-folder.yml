name: "Dev: Sync .github folder across branches"

on:
  workflow_dispatch:
    inputs:
      target_branches:
        description: 'Target branches to sync (comma-separated, leave empty for all branches)'
        required: false
        default: ''
      force_sync:
        description: 'Sync mode'
        required: false
        type: choice
        options:
          - 'false'
          - 'true'
        default: 'false'
  push:
    branches:
      - main
    paths:
      - '.github/**'

jobs:
  sync-github-folder:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get all branches
        id: get-branches
        run: |
          # Get all remote branches excluding main
          BRANCHES=$(git branch -r | grep -v "origin/main" | grep -v "HEAD" | sed 's/origin\///' | tr '\n' ',' | sed 's/,$//')
          echo "branches=$BRANCHES" >> $GITHUB_OUTPUT
          echo "Available branches: $BRANCHES"

      - name: Parse target branches
        id: parse-targets
        run: |
          if [ -n "${{ github.event.inputs.target_branches }}" ]; then
            TARGET_BRANCHES="${{ github.event.inputs.target_branches }}"
          else
            TARGET_BRANCHES="${{ steps.get-branches.outputs.branches }}"
          fi
          echo "target_branches=$TARGET_BRANCHES" >> $GITHUB_OUTPUT
          echo "Target branches: $TARGET_BRANCHES"

      - name: Sync .github folder to each branch
        run: |
          TARGET_BRANCHES="${{ steps.parse-targets.outputs.target_branches }}"
          FORCE_SYNC="${{ github.event.inputs.force_sync }}"
          
          # Convert comma-separated string to array
          IFS=',' read -ra BRANCH_ARRAY <<< "$TARGET_BRANCHES"
          
          echo "=========================================="
          echo "Starting sync process for ${#BRANCH_ARRAY[@]} branch(es)"
          echo "Force sync mode: $FORCE_SYNC"
          echo "=========================================="
          
          for branch in "${BRANCH_ARRAY[@]}"; do
            branch=$(echo "$branch" | xargs)  # Trim whitespace
            if [ -n "$branch" ]; then
              echo ""
              echo "=========================================="
              echo "üîÑ Processing branch: $branch"
              echo "=========================================="
              
              # Check if branch exists
              if git ls-remote --heads origin "$branch" | grep -q "$branch"; then
                echo "‚úÖ Branch $branch exists"
                
                # Get the latest commit hash for main branch
                MAIN_COMMIT=$(git rev-parse origin/main)
                echo "üìã Main branch commit: ${MAIN_COMMIT:0:8}"
                
                # Get the latest commit hash for target branch
                TARGET_COMMIT=$(git rev-parse "origin/$branch")
                echo "üìã Target branch commit: ${TARGET_COMMIT:0:8}"
                
                # Check if .github folder exists in target branch
                if git ls-tree -r --name-only "origin/$branch" | grep -q "^\.github/"; then
                  echo "üìÅ .github folder exists in $branch"
                  
                  # Get the latest modification time of .github files in main
                  MAIN_GITHUB_TIME=$(git log --format="%ct" --max-count=1 -- .github/ | head -1)
                  
                  # Get the latest modification time of .github files in target branch
                  TARGET_GITHUB_TIME=$(git log --format="%ct" --max-count=1 "origin/$branch" -- .github/ | head -1)
                  
                  # Convert timestamps to readable format
                  MAIN_GITHUB_DATE=$(date -d "@$MAIN_GITHUB_TIME" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
                  TARGET_GITHUB_DATE=$(date -d "@$TARGET_GITHUB_TIME" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
                  
                  echo "üïê Main .github last modified: $MAIN_GITHUB_DATE (timestamp: $MAIN_GITHUB_TIME)"
                  echo "üïê Target .github last modified: $TARGET_GITHUB_DATE (timestamp: $TARGET_GITHUB_TIME)"
                  
                  # Compare timestamps or check force sync
                  if [ "$FORCE_SYNC" = "true" ] || [ -z "$TARGET_GITHUB_TIME" ] || [ "$MAIN_GITHUB_TIME" -gt "$TARGET_GITHUB_TIME" ]; then
                    echo "üîÑ Syncing .github folder to $branch..."
                    
                    # Create a new branch from target branch
                    echo "üìù Creating temporary branch sync-github-$branch"
                    git checkout -b "sync-github-$branch" "origin/$branch"
                    
                                         # Copy .github folder from main (excluding sync-github-folder.yml)
                     echo "üìã Copying .github folder from main (excluding sync-github-folder.yml)"
                     git checkout origin/main -- .github/
                     
                     # Remove sync-github-folder.yml if it exists in target branch
                     if [ -f ".github/workflows/sync-github-folder.yml" ]; then
                       echo "üóëÔ∏è  Removing sync-github-folder.yml from target branch"
                       git rm -f .github/workflows/sync-github-folder.yml
                     fi
                     
                     # Check if there are any changes
                    if git diff --staged --quiet; then
                      echo "‚ÑπÔ∏è  No changes to sync for $branch"
                      git checkout main
                      git branch -D "sync-github-$branch"
                      echo "üßπ Cleaned up temporary branch"
                    else
                      # Show what files will be changed
                      echo "üìÑ Files to be updated:"
                      git diff --staged --name-only | sed 's/^/   - /'
                      
                      # Commit and push changes
                      echo "üíæ Committing changes..."
                      git config user.name "github-actions[bot]"
                      git config user.email "github-actions[bot]@users.noreply.github.com"
                      git commit -m "Sync .github folder from main branch"
                      
                      # Push to target branch
                      echo "üöÄ Pushing changes to $branch..."
                      git push origin "sync-github-$branch:$branch"
                      
                      # Cleanup
                      git checkout main
                      git branch -D "sync-github-$branch"
                      
                      echo "‚úÖ Successfully synced .github folder to $branch"
                    fi
                  else
                    echo "‚è≠Ô∏è  Skipping $branch - target branch .github files are newer or same age"
                    echo "   Main: $MAIN_GITHUB_DATE"
                    echo "   Target: $TARGET_GITHUB_DATE"
                  fi
                else
                  echo "üìÅ .github folder doesn't exist in $branch, creating it..."
                  
                  # Create a new branch from target branch
                  echo "üìù Creating temporary branch sync-github-$branch"
                  git checkout -b "sync-github-$branch" "origin/$branch"
                  
                                     # Copy .github folder from main (excluding sync-github-folder.yml)
                   echo "üìã Copying .github folder from main (excluding sync-github-folder.yml)"
                   git checkout origin/main -- .github/
                   
                   # Remove sync-github-folder.yml if it exists in target branch
                   if [ -f ".github/workflows/sync-github-folder.yml" ]; then
                     echo "üóëÔ∏è  Removing sync-github-folder.yml from target branch"
                     git rm -f .github/workflows/sync-github-folder.yml
                   fi
                   
                   # Show what files will be added
                  echo "üìÑ Files to be added:"
                  git diff --staged --name-only | sed 's/^/   - /'
                  
                  # Commit and push changes
                  echo "üíæ Committing changes..."
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"
                  git commit -m "Add .github folder from main branch"
                  
                  # Push to target branch
                  echo "üöÄ Pushing changes to $branch..."
                  git push origin "sync-github-$branch:$branch"
                  
                  # Cleanup
                  git checkout main
                  git branch -D "sync-github-$branch"
                  
                  echo "‚úÖ Successfully created .github folder in $branch"
                fi
              else
                echo "‚ùå Branch $branch does not exist, skipping..."
              fi
              
              echo "=========================================="
              echo "Finished processing branch: $branch"
              echo "=========================================="
            fi
          done
          
          echo ""
          echo "=========================================="
          echo "üéâ Sync process completed!"
          echo "==========================================" 