name: "Dev: Build Qubership EnvGene docker images"

run-name: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.tests-only == 'true') && format('Test EnvGene for commit {0}', github.sha) || ((github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE'))) || (github.event_name == 'workflow_dispatch' && (github.event.inputs.build-pipegene == 'true' || github.event.inputs.build-envgene == 'true' || github.event.inputs.build-pipeline == 'true' || github.event.inputs.build-effective-set == 'true' || github.event.inputs.build-effective-set-python == 'true') && github.event.inputs.tests-only == 'false')) && format('Build EnvGene for commit {0}', github.sha) || format('Test EnvGene for commit {0}', github.sha) }}

on:
  workflow_dispatch:
    inputs:
      tests-only:
        description: 'Run tests only'
        required: false
        default: false
        type: boolean
      build-pipegene:
        description: 'Build Qubership PipeGene image'
        required: false
        default: true
        type: boolean
      build-envgene:
        description: 'Build Qubership Envgene image'
        required: false
        default: true
        type: boolean
      build-pipeline:
        description: 'Build Instance Repo Pipeline image'
        required: false
        default: true
        type: boolean
      build-effective-set:
        description: 'Build Effective Set Generator image'
        required: false
        default: true
        type: boolean
      build-effective-set-python:
        description: 'Build Effective Set Generator Python image'
        required: false
        default: true
        type: boolean
  push:
    branches-ignore:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'
  pull_request:
    types: [closed]
    branches:
      - 'main'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'

env:
  REGISTRY: ghcr.io
  CI_PROJECT_DIR: ${{ github.workspace }}

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  conventional-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Conventional Commits
        uses: ./.github/actions/conventional-commits

  link-check:
    needs: [conventional-commits]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Link Checker
        uses: ./.github/actions/link-checker

  linters:
    needs: [conventional-commits]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lint Code Base
        uses: ./.github/actions/super-linter
        with:
          full_scan: false
          github-token: ${{ secrets.GITHUB_TOKEN }}

  tests:
    needs: [conventional-commits]
    runs-on: ubuntu-latest
    container:
      image: python:3.12-slim-bookworm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Tests
        uses: ./.github/actions/run-tests

  build-qubership-pipegene:
    needs: [link-check, linters, tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-pipegene == 'true' && github.event.inputs.tests-only == 'false') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      custom_tag: ${{ steps.build-pipegene.outputs.custom_tag }}
      branch_tag: ${{ steps.build-pipegene.outputs.branch_tag }}
      timestamp: ${{ steps.build-pipegene.outputs.timestamp }}
      branch_latest_tag: ${{ steps.build-pipegene.outputs.branch_latest_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Qubership PipeGene Docker Image
      uses: ./.github/actions/build-pipegene
      id: build-pipegene
      with:
        registry: ${{ env.REGISTRY }}
        git-user: ${{ secrets.GIT_USER }}
        git-token: ${{ secrets.GIT_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build-qubership-envgene:
    needs: [link-check, linters, tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-envgene == 'true' && github.event.inputs.tests-only == 'false') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      custom_tag: ${{ steps.build-envgene.outputs.custom_tag }}
      branch_tag: ${{ steps.build-envgene.outputs.branch_tag }}
      timestamp: ${{ steps.build-envgene.outputs.timestamp }}
      branch_latest_tag: ${{ steps.build-envgene.outputs.branch_latest_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Qubership Envgene Docker Image
      uses: ./.github/actions/build-envgene
      id: build-envgene
      with:
        registry: ${{ env.REGISTRY }}
        gh-access-token: ${{ secrets.GH_ACCESS_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build-effective-set-jar:
    needs: [link-check, linters, tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-effective-set == 'true' && github.event.inputs.tests-only == 'false') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    uses: netcracker/qubership-workflow-hub/.github/workflows/maven-publish.yml@main
    with:
      maven-command: "--batch-mode package -Dgpg.skip=true -f build_effective_set_generator_java/pom.xml"
      java-version: 17
      upload-artifact: true
      artifact-id: effective_set_jar
      ref: ${{ github.ref }}
    secrets:
      maven-token: ${{ secrets.GITHUB_TOKEN }}

  build-effective-set-generator:
    needs: [build-effective-set-jar]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-effective-set == 'true' && github.event.inputs.tests-only == 'false') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      custom_tag: ${{ steps.build-effective-set-generator.outputs.custom_tag }}
      branch_tag: ${{ steps.build-effective-set-generator.outputs.branch_tag }}
      timestamp: ${{ steps.build-effective-set-generator.outputs.timestamp }}
      branch_latest_tag: ${{ steps.build-effective-set-generator.outputs.branch_latest_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Effective Set Generator Docker Image
      uses: ./.github/actions/build-effective-set
      id: build-effective-set-generator
      with:
        registry: ${{ env.REGISTRY }}
        git-user: ${{ secrets.GIT_USER }}
        git-token: ${{ secrets.GIT_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build-effective-set-generator-python:
    needs: [link-check, linters, tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-effective-set-python == 'true' && github.event.inputs.tests-only == 'false') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      custom_tag: ${{ steps.build-effective-set-python.outputs.custom_tag }}
      branch_tag: ${{ steps.build-effective-set-python.outputs.branch_tag }}
      timestamp: ${{ steps.build-effective-set-python.outputs.timestamp }}
      branch_latest_tag: ${{ steps.build-effective-set-python.outputs.branch_latest_tag }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Build Effective Set Generator Python Docker Image
      uses: ./.github/actions/build-effective-set-python
      id: build-effective-set-python
      with:
        registry: ${{ env.REGISTRY }}
        gh-access-token: ${{ secrets.GH_ACCESS_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

  build-instance-repo-pipeline:
    needs:
      - build-qubership-pipegene
      - build-qubership-envgene
      - build-effective-set-generator
      - build-effective-set-generator-python
    if: |
      always() &&
      (github.event_name == 'workflow_dispatch' && github.event.inputs.build-pipeline == 'true') ||
      (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: "Prepare app token"
        if: ${{ vars.GH_BUMP_VERSION_APP_ID != '' }}
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.GH_BUMP_VERSION_APP_ID }}
          private-key: ${{ secrets.GH_BUMP_VERSION_APP_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}

      - name: Update Docker Image Tags in Pipeline
        run: |
          # Use outputs from previous jobs instead of regenerating tags
          echo "Using tags from previous job outputs:"

          # Check which images were built and update accordingly
          if [[ "${{ needs.build-qubership-pipegene.result }}" == "success" ]]; then
            sed -i "s|qubership-pipegene:[^']*|qubership-pipegene:${{ needs.build-qubership-pipegene.outputs.custom_tag }}|g" github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml
          fi
          if [[ "${{ needs.build-qubership-envgene.result }}" == "success" ]]; then
            sed -i "s|qubership-envgene:[^']*|qubership-envgene:${{ needs.build-qubership-envgene.outputs.custom_tag }}|g" github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml
          fi
          if [[ "${{ needs.build-effective-set-generator.result }}" == "success" ]]; then
            sed -i "s|qubership-effective-set-generator:[^']*|qubership-effective-set-generator:${{ needs.build-effective-set-generator.outputs.custom_tag }}|g" github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml
          fi
          if [[ "${{ needs.build-effective-set-generator-python.result }}" == "success" ]]; then
            sed -i "s|qubership-effective-set-generator-python:[^']*|qubership-effective-set-generator-python:${{ needs.build-effective-set-generator-python.outputs.custom_tag }}|g" github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml
          fi

          # Check if any images were updated
          if git diff --quiet github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml; then
            echo "No changes to commit - no images were built or tags were already up to date"
          else
            echo "Updated pipeline.yml with docker tags from job outputs"
          fi

          # Show the changes
          echo "Changes made to pipeline.yml:"
          git diff github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml || true

          # Commit the changes only if there are actual changes
          if ! git diff --quiet github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml; then
            git config --global user.name "qubership-actions[bot]"
            git config --global user.email "qubership-actions[bot]@users.noreply.github.com"
            git add github_workflows/instance-repo-pipeline/.github/workflows/pipeline.yml
            git commit -m "chore: Update docker image tags from job outputs for branch ${{ github.ref_name }} [skip ci]"

            # Push the changes
            git push origin HEAD:${{ github.ref_name }} || echo "Failed to push changes"
          else
            echo "No changes to commit - skipping git operations"
          fi

      - name: Build Instance Repo Pipeline Docker Image
        uses: ./.github/actions/build-pipeline
        with:
          registry: ${{ env.REGISTRY }}
          gh-access-token: ${{ secrets.GH_ACCESS_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
