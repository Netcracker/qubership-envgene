name: "Dev: Build Qubership EnvGene docker images"

run-name: "Build EnvGene docker images for commit ${{ github.sha }}"

on:
  workflow_dispatch:
    inputs:
      build-pipegene:
        description: 'Build Qubership PipeGene image'
        required: false
        default: true
        type: boolean
      build-envgene:
        description: 'Build Qubership Envgene image'
        required: false
        default: true
        type: boolean
      build-pipeline:
        description: 'Build Instance Repo Pipeline image'
        required: false
        default: true
        type: boolean
      build-effective-set:
        description: 'Build Effective Set Generator image'
        required: false
        default: true
        type: boolean
      build-effective-set-python:
        description: 'Build Effective Set Generator Python image'
        required: false
        default: true
        type: boolean
  push:
    branches:
      - '**'
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'README.md'
      - 'CHANGELOG.md'

env:
  REGISTRY: ghcr.io
  CI_PROJECT_DIR: ${{ github.workspace }}

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

jobs:
  tests:
    if: |
      github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim-bookworm
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check Conventional Commits
        uses: webiny/action-conventional-commits@v1.3.0
      
      - name: Run Tests
        uses: ./.github/actions/run-tests

  build-qubership-pipegene:
    needs: [tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-pipegene == 'true') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Qubership PipeGene Docker Image
        uses: ./.github/actions/build-pipegene
        with:
          registry: ${{ env.REGISTRY }}
          git-user: ${{ secrets.GIT_USER }}
          git-token: ${{ secrets.GIT_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-qubership-envgene:
    needs: [tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-envgene == 'true') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Qubership Envgene Docker Image
        uses: ./.github/actions/build-envgene
        with:
          registry: ${{ env.REGISTRY }}
          gh-access-token: ${{ secrets.GH_ACCESS_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-instance-repo-pipeline:
    needs: [tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-pipeline == 'true') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Instance Repo Pipeline Docker Image
        uses: ./.github/actions/build-pipeline
        with:
          registry: ${{ env.REGISTRY }}
          gh-access-token: ${{ secrets.GH_ACCESS_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-effective-set-jar:
    needs: [tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-effective-set == 'true') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    uses: netcracker/qubership-workflow-hub/.github/workflows/maven-publish.yml@main
    with:
      maven-command: "--batch-mode package -Dgpg.skip=true -f build_effective_set_generator_java/pom.xml"
      java-version: 17
      upload-artifact: true
      artifact-id: effective_set_jar
      ref: ${{ github.ref }}
    secrets:
      maven-token: ${{ secrets.GITHUB_TOKEN }}

  build-effective-set-generator:
    needs: [build-effective-set-jar]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-effective-set == 'true') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Effective Set Generator Docker Image
        uses: ./.github/actions/build-effective-set
        with:
          registry: ${{ env.REGISTRY }}
          git-user: ${{ secrets.GIT_USER }}
          git-token: ${{ secrets.GIT_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-effective-set-generator-python:
    needs: [tests]
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.build-effective-set-python == 'true') || (github.event_name == 'push' && (contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:') || contains(github.event.head_commit.message, 'BREAKING CHANGE')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Effective Set Generator Python Docker Image
        uses: ./.github/actions/build-effective-set-python
        with:
          registry: ${{ env.REGISTRY }}
          gh-access-token: ${{ secrets.GH_ACCESS_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}